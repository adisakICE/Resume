version: '2'
services:

  # nginx-proxy:
  #   image: jwilder/nginx-proxy
  #   container_name: nginx-proxy
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - "/etc/nginx/vhost.d"
  #     - "/usr/share/nginx/html"
  #     - "/var/run/docker.sock:/tmp/docker.sock:ro"
  #     - "nginx-storage:/etc/nginx/certs"

  # lets-encrypt2:
  #   container_name: lets-encrypt2
  #   image: jrcs/letsencrypt-nginx-proxy-companion
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #   volumes_from:
  #     - "nginx-proxy"
  #   restart: always
  
  db:
    image: mariadb:latest
    container_name: db
    environment:
      MYSQL_ROOT_PASSWORD: admin
      # my_secret_password
      MYSQL_DATABASE: resume
      MYSQL_USER: adisak@123!
      MYSQL_PASSWORD: adisak@123!
    restart: always
    volumes:
      - ./data:/docker-entrypoint-initdb.d
      - dbdata:/var/lib/mysql

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    depends_on:
      - db
    links:
      - db
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    restart: always
    ports:
      - 8181:80

  node-red:
    image: nodered/node-red
    restart: always
    container_name: node-red
    depends_on:
      - db
    ports:
      - 1880:1880
    volumes:
      - './node-red/data/:/data'
      
  api:
    container_name: api
    build: ./api
    depends_on:
      - db
    restart: always
    ports:
      - 3000:8100
    environment:
      NODE_ENV: development
  
  nginx-react-resume:
    container_name: react-resume
    depends_on:
      - db
      - node-red
    build:
      context: ./resume_adisak
      dockerfile: Dockerfile
    restart: always
    ports:
      - 8089:80
    environment:
      NODE_ENV: development


  nginx-react-ex:
    container_name: react-ex
    depends_on:
      - db
      - api
    build:
      context: ./ex
      dockerfile: Dockerfile
    restart: always
    ports:
      - 8090:80
    environment:
      NODE_ENV: development
  
  agent:
    container_name: portainer-agent
    image: portainer/agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    restart: always
    
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    command: -H tcp://agent:9001 --tlsskipverify
    ports:
      - "9000:9000"
    restart: always
    volumes:
      - portainer_data:/data


  # agent:
  #   container_name: agent
  #   image: portainer/agent
  #   depends_on:
  #     - portainer
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /var/lib/docker/volumes:/var/lib/docker/volumes
  # my-web:
  #   container_name: web_v1_8
  #   build:
  #     context: ./web_v1_8
  #   # volumes:
  #   #  - './my-project:/app'
  #   #  - './app/node_modules'
  #   #  - ./vue/vuejs.sh:/vuejs.sh
  #   ports:
  #     - '8099:8080'
  #   # - '8111:8000'
  #   # entrypoint: ['./vuejs.sh']
  #   depends_on:
  #     - db
  #   environment:
  #     - TZ=Asia/Bangkok
  #   restart: always

    
volumes:
    dbdata:
    portainer_data: 
    # nginx-storage:

# networks:   
#     default:
#       external:
#         name: auto-lets-encrypt

